


$(function() {
	disegnaBottoni();
	
	if (window.location.hash) {
		setTimeout(function() {
			$(window.location.hash + " #commentcc").effect('highlight',{mode:'show'},3000)
		},500);
	}

});


function disegnaBottoni() {
	$('.buttonStyle').button();
	$('.editButton').button({icons : {primary : "ui-icon-pencil"}});
	$('.personButton').button({icons : {primary : "ui-icon-person"}});
	$('.homeButton').button({icons : {primary : "ui-icon-home"}});
	$('.calendarButton').button({icons : {primary : "ui-icon-calendar"}});
	$('.commentButton').button({icons : {primary : "ui-icon-comment"}});
	$('.ideaButton').button({icons : {primary : "ui-icon-lightbulb"}});
	$('.deleteButton').button({icons : {primary : "ui-icon-circle-close"}});
	$('.newButton').button({icons : {primary : "ui-icon-plusthick"}});
	$('.settingsButton').button({icons : {primary : "ui-icon-wrench"}});
	$('.mapButton').button({icons : {primary : "ui-icon-image"}});
	$('.historyButton').button({icons : {primary : "ui-icon-arrowreturnthick-1-w"}});
	$('.notesButton').button({icons : {primary : "ui-icon-note"}});
	
	$(".disableButton")
	    .unbind("ajax:beforeSend")
	    .bind("ajax:beforeSend", function() {
			$(this).hide();
			var toAdd = $('<div class="waitDiv"><%=image_tag "facebook-loader.gif", :alt => "loading..."%> </div>');
			toAdd.width($(this).outerWidth(true));
			toAdd.height($(this).outerHeight(true)); 
			$(this).after(toAdd);
	    })
	    .unbind("ajax:complete")
	    .bind("ajax:complete", function() {
	    	$(this).show();
	    	$('.waitDiv').remove();
	    })
    /*
	$('.disableButton').click(function() {
	});*/
}

$.datepicker.setDefaults( $.datepicker.regional[ "it" ] );



var et = {};


function calculate_event_times() {
	et.est = $("#event_starttime")
	et.eet = $("#event_endtime")
	et.eventStartTime = et.est.datetimepicker("getDate");
    et.eventEndTime = et.eet.datetimepicker("getDate");
    et.eventStartDate = new Date(et.eventStartTime);
    et.eventEndDate = new Date(et.eventEndTime);
    
    et.get = $("#groups_end_time")
    et.cet = $("#candidates_end_time")
    et.groupTime = et.get.datetimepicker("getDate");
    et.candidatesTime = et.cet.datetimepicker("getDate");
    et.groupDate = new Date(et.groupTime);
    et.candidatesDate = new Date(et.candidatesTime);
}


function startTimeChanged() {
	
	//se la data inizio supera la data fine
	if (!(et.eventEndDate.getTime() > et.eventStartDate.getTime())) {
		//reimposto la data fine avanti			
		et.eet.datetimepicker("setDate",et.eventStartTime);
	}
	
	//se la data inizio supera la data fine gruppi
	if (!(et.groupDate.getTime() > et.eventStartDate.getTime())) {
		//reimposto la data gruppi avanti 				
		et.get.datetimepicker("setDate",et.eventStartTime);
	}
	
	//se la data inizio supera la data fine candidati
	if (!(et.candidatesDate.getTime() > et.eventStartDate.getTime())) {
		//reimposto la data candidati avanti 				
		et.cet.datetimepicker("setDate",et.eventStartTime);
	}
			
	//imposta come data minima quella di inizio dell'evento
	var diff =  Math.floor(( et.eventStartDate - new Date()) / 86400000);
	et.eet.datetimepicker("option","minDate",diff);
}

function endTimeChanged() {
	//se la data inizio supera la data fine
	if (!(et.eventEndDate.getTime() > et.eventStartDate.getTime())) { 	
		//reimposta la data inizio indietro			
		et.est.datetimepicker("setDate",et.eventEndTime);
	}
}

function groupsTimeChanged() {
	
	//se supera la data fine candidati
	if (!(et.candidatesDate.getTime() > et.groupDate.getTime())) {
		//sposto la data fine candidati 				
		$("#candidates_end_time").datetimepicker("setDate",et.groupTime);
	}
	
	//se supera la data fine evento
	if (!(et.eventEndDate.getTime() > et.groupDate.getTime())) {
		// sposto la data fine evento in avanti 				
		et.eet.datetimepicker("setDate",et.groupTime);
	}	
	
	//imposta un limite inferiore alla data fine dei candidati
	var diff =  Math.floor(( et.groupDate - new Date()) / 86400000);
	$("#candidates_end_time").datetimepicker("option","minDate",diff);
}

function candidatesTimeChanged() {
	//se Ã¨ inferiore alla data fine gruppi
	if (!(et.candidatesDate.getTime() > et.groupDate.getTime())) {
		//sposto indietro la data fine gruppi 				
		$("#groups_end_time").datetimepicker("setDate",et.candidatesTime);
	}
	
	//se supera la data fine evento
	if (!(et.eventEndDate.getTime() > et.candidatesDate.getTime())) {
		// sposto la data fine evento in avanti 				
		et.eet.datetimepicker("setDate",et.candidatesTime);
	}
}

var datePickerOptions = {
	dateFormat : "dd/mm/yy",
	buttonImageOnly : true,
	buttonImage : "<%= asset_path('iconCalendar.png') %>",
    showOn : "both",
    changeMonth : false,
    changeYear : false,
    yearRange : "c:c+10",
    minDate : -2,
    maxDate: "+10Y",
    duration: "",  
    showTime: true,  
    constrainInput: true,
    stepMinute: 15,  
    stepHour: 1,  
    altTimeField: "alt",  
    time24h: true
}


function disegnaDatePicker() {
	//data inizio evento	
	$('#event_starttime').datetimepicker($.extend({},datePickerOptions,{
        onClose: function(date) {
        	calculate_event_times();   	
        	startTimeChanged();		
        }
     }));
	
	//data termine evento
	$("#event_endtime").datetimepicker($.extend({},datePickerOptions,{
        onClose: function(date) {
        	calculate_event_times(); 	
        	endTimeChanged();	
        }
 	}));   
		
	$("#candidates_end_time").datetimepicker($.extend({},datePickerOptions,{
        onClose: function(date) {
        	calculate_event_times();
        	
	        candidatesTimeChanged();
 			
        }
 	}));   
		
	$('#groups_end_time').datetimepicker($.extend({},datePickerOptions,{
        onClose: function(date) {
        	calculate_event_times();
        	
	        groupsTimeChanged();
        }
   }));
 }

function deleteMe(el) {
	$(el).remove();
}

function getURLParameter(name) {
    return decodeURIComponent(
        (location.search.match(RegExp("[?|&]"+name+'=(.+?)(&|$)'))||[,null])[1]
    );  
}


function array2dToJson(a, p, nl) {
  var i, j, s = '{"' + p + '":[';
  nl = nl || '';
  for (i = 0; i < a.length; ++i) {
    s += nl + array1dToJson(a[i]);
    if (i < a.length - 1) {
      s += ',';
    }
  }
  s += nl + ']}';
  return s;
}

function array1dToJson(a, p) {
  var i, s = '[';
  for (i = 0; i < a.length; ++i) {
    if (typeof a[i] == 'string') {
      s += '"' + a[i] + '"';
    }
    else { // assume number type
      s += a[i];
    }
    if (i < a.length - 1) {
      s += ',';
    }
  }
  s += ']';
  if (p) {
    return '{"' + p + '":' + s + '}';
  }
  return s;
}


function doModal(el){
    el.modal({
        opacity: 60,
        overlayCss: {
           backgroundColor: "#dddddd"
        },
        minWidth: '400px',
        minHeight: '200px',
        transient: 'true',
        persist: 'true', 
        onShow: function(dialog){
            dialog.data.prepend('<div id="error_updating"></div>');
        },           
        onClose: function(dialog){
        	$('#error_updating').remove();
            $.modal.close();
        }
    });
}
